<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Color_Generator.Controls">

    <Style TargetType="{x:Type Button}" x:Key="ButtonBase">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="Height" Value="37"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 1 5 1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".4"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.Btn.Primary" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Dark.Btn.Primary.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.Btn.Primary.Static.Foreground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Primary.MouseOver.Background }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Primary.Pressed.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.Btn.Secondary" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Dark.Btn.Secondary.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.Btn.Secondary.Static.Foreground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Secondary.MouseOver.Background }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Secondary.Pressed.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.Btn.Danger" BasedOn="{StaticResource ButtonBase}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Dark.Btn.Danger.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.Btn.Danger.Static.Foreground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Danger.MouseOver.Background }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Button.Background" Value="{StaticResource Dark.Btn.Danger.Pressed.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.TextBox" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Dark.TextBox.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.TextBox.Static.Foreground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="37" />
        <Setter Property="Padding" Value="5 1 5 1" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.PasswordBox" BasedOn="{StaticResource {x:Type PasswordBox}}" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{StaticResource Dark.TextBox.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.TextBox.Static.Foreground}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="37" />
        <Setter Property="Padding" Value="5 1 5 1" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".8"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.CheckBox" BasedOn="{StaticResource {x:Type controls:CustomCheckBox}}" TargetType="{x:Type controls:CustomCheckBox}">
        <Setter Property="Background" Value="{StaticResource Dark.CheckBox.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.CheckBox.Static.Foreground}" />
        <Setter Property="CheckMarkBrush" Value="{StaticResource Dark.CheckBox.Checked.Mark.Fill}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource Dark.CheckBox.Checked.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Dark.CheckBox.Disabled.Background}" />
                <Setter Property="Opacity" Value=".5"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Dark.CheckBox.Checked.Background}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.RadioButton" BasedOn="{StaticResource {x:Type controls:CustomRadioButton}}" TargetType="{x:Type controls:CustomRadioButton}">
        <Setter Property="Background" Value="{StaticResource Dark.RadioButton.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.RadioButton.Static.Foreground}" />
        <Setter Property="DotFill" Value="{StaticResource Dark.RadioButton.Checked.Dot.Fill}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="36" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="StrokeThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource Dark.RadioButton.Checked.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Dark.CheckBox.Disabled.Background}" />
                <Setter Property="Opacity" Value=".5"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Dark.RadioButton.Checked.Background}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.ToggleSwitch" BasedOn="{StaticResource {x:Type controls:ToggleSwitch}}" TargetType="{x:Type controls:ToggleSwitch}">
        <Setter Property="Width" Value="60" />
        <Setter Property="Background" Value="{StaticResource Dark.ToggleSwitch.Static.Background}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ThumbMargin" Value="3" />
        <Setter Property="ThumbWidth" Value="20" />
        <Setter Property="ThumbHeight" Value="20" />
        <Setter Property="ThumbCornerRadius" Value="2" />
        <Setter Property="ThumbBackground" Value="{StaticResource Dark.ToggleSwitch.Static.Thumb.Background}" />
        <Setter Property="TrackHeight" Value="30" />
        <Setter Property="TrackCornerRadius" Value="2" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource Dark.ToggleSwitch.Checked.Background}" />
                <Setter Property="ThumbBackground" Value="{StaticResource Dark.ToggleSwitch.Checked.Thumb.Background}" />
                <Setter Property="ThumbMargin" Value="0 3 3 3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Dark.ToggleSwitch.Disabled.Background}" />
                <Setter Property="Opacity" Value=".5"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource Dark.ToggleSwitch.Checked.Background}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Dark.ComboBox" BasedOn="{StaticResource {x:Type controls:CustomComboBox}}" TargetType="{x:Type controls:CustomComboBox}">
        <Setter Property="Background" Value="{StaticResource Dark.ComboBox.Static.Background}" />
        <Setter Property="Foreground" Value="{StaticResource Dark.ComboBox.Static.Foreground}" />
        <Setter Property="ArrowFill" Value="{StaticResource Dark.ComboBox.Static.Arrow.Fill}" />
        <Setter Property="MenuBackground" Value="{StaticResource Dark.ComboBox.Static.Menu.Background}" />
        <Setter Property="MenuCornerRadius" Value="0" />
        <Setter Property="ItemSelected" Value="{StaticResource Dark.ComboBoxItem.Selected.Background}" />
        <Setter Property="ItemMouseOver" Value="{StaticResource Dark.ComboBoxItem.MouseOver.Background}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Cursor" Value="None" />
                <Setter Property="Background" Value="{StaticResource Dark.ComboBox.Editable.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".6" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>